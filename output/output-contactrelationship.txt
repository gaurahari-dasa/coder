*** SelectData: model_table, primary_key ***
'contact_relationships.active',
'contact_relationships.contact_relationship_id',
'contacts.contact_id as source_contact_id',
'contacts.photo_path as source_contact_photo',
'contacts.name as source_contact_name',
'contacts.gender as source_contact_gender',
'contacts.mobile as source_contact_mobile',
'contacts.whatsapp as source_contact_whatsapp',
'relation_pairs.relation_pair_id',
'relation_pairs.name as relation_pair_name',
******

*** Paginate (SelectData) ***
'active' => $item->active,
'id' => $item->contact_relationship_id,
'sourceContactId' => $item->source_contact_id,
'sourceContactPhoto' => $item->source_contact_photo ? Storage::url($item->source_contact_photo) : '/img/no-photo.svg',
'sourceContactName' => $item->source_contact_name,
'sourceContactGender' => $item->source_contact_gender,
'sourceContactMobile' => $item->source_contact_mobile,
'sourceContactWhatsapp' => $item->source_contact_whatsapp,
'relationPairId' => $item->relation_pair_id,
'relationPairName' => $item->relation_pair_name,
******

*** Search clause (Select Data) ***
'contacts.name',
'contacts.mobile',
'relation_pairs.name',
******

*** Sort by id column (SelectData) ***

            if ($sortField === 'id') {
                $sortField = 'contact_relationship_id';
            }
            
******

*** Form: addForm ***
relationPairId: null,
sourceContactId: null,
active: true,
contactId: props.contactId,
******

*** Form: editForm ***
relationPairId: null,
sourceContactId: null,
active: null,
******

*** editRow ***

    const datum = props.contactRelationships.data.find(v => v.id === id);
    editId = id;
        
editForm.relationPairId = datum.relationPairId;
editForm.sourceContactId = datum.sourceContactId;
editForm.active = !!datum.active; // cast to boolean, Haribol
******

*** UI: addForm ***
<FormSelect class="mt-4" id="relationPairId" title="Relationship" :options="relationships" setFocus required
              v-model="addForm.relationPairId" :error="addForm.errors.relationPairId" />
<FormInput type="text" class="mt-4" id="sourceContactId" title="Relative Name" required
              v-model="addForm.sourceContactId" :error="addForm.errors.sourceContactId" />
<FormCheckBox class="mt-4" id="active" title="Active" v-model="addForm.active" />
******

*** UI: editForm ***
<FormSelect class="mt-4" id="relationPairId" title="Relationship" :options="relationships" setFocus required
              v-model="editForm.relationPairId" :error="editForm.errors.relationPairId" />
<FormInput type="text" class="mt-4" id="sourceContactId" title="Relative Name" required
              v-model="editForm.sourceContactId" :error="editForm.errors.sourceContactId" />
<FormCheckBox class="mt-4" id="active" title="Active" v-model="editForm.active" />
******

*** Grid: parameters ***
headings: ['Name', '', 'Name', 'Mobile', 'Active']
column_types: [DataColumn, ImageColumn, DataColumn, DataColumn, ActiveColumn]
fields: ['relationPairName', 'sourceContactPhoto', 'sourceContactName', 'sourceContactMobile', 'active']
sortable_fields: ['relationPairName', 'sourceContactName', 'sourceContactMobile']
******

*** Vue props ***
relationships: Array,
******

*** Controller props ***
'relationships' => HelperClass::list()->get,
******

*** Controller: validation ***
'relationPairId' => '',
'sourceContactId' => '',
'active' => '',
******

*** Store data ***
return ContactRelationship::create([
'relation_pair_id' => $validated['relationPairId'],
'source_contact_id' => $validated['sourceContactId'],
'active' => $validated['active'],
'contact_id' => request('contactId'),
]);
******

*** Update data ***
$contactRelationship->relation_pair_id = $validated['relationPairId'];
$contactRelationship->source_contact_id = $validated['sourceContactId'];
$contactRelationship->active = $validated['active'];
LogActivityHelper::save($contactRelationship);
return $contactRelationship;
******

*** Model: fillable ***
'relation_pair_id',
'source_contact_id',
'active',
'contact_id',
******

